#!/usr/bin/env python3


import time
from datetime import datetime
import sqlite3
from easysnmp import Session
from sqlite3 import Error

VL = 'DEFAULT_VLAN'
oids = {'dot1dTpFdbEntryAddress':'1.3.6.1.2.1.17.4.3.1.1',
            'dot1dTpFdbEntryPort':'1.3.6.1.2.1.17.4.3.1.2',
            'dot1qTpFdbEntryStatus':'1.3.6.1.2.1.17.4.3.1.3',
            'dot1qTpFdbAddress':'1.3.6.1.2.17.7.1.2.2.1.1',
            'dot1qTpFdbPort':'1.3.6.1.2.1.17.7.1.2.2.1.2',
            'dot1qTpFdbStatus':'1.3.6.1.2.1.17.7.1.2.2.1.3',
            'dot1qVlanStaticName':'1.3.6.1.2.1.17.7.1.4.3.1.1',
            'sysDescr':'1.1.3.6.1.2.1.1.1',
            'dot1dBasePortIfIndex':'1.3.6.1.2.1.17.1.4.1.2',
            'vlans':'1.3.6.1.2.1.17.7.1.4.3.1.4'}
def  create_database_connection(db_file):
    """ create a database connection to a SQLite database """
    connection_to_database = None
    try:
        connection_to_database = sqlite3.connect(db_file)
    except Error as e:
        print(e)
    finally:
        if connection_to_database:
        #    print("Connection success!")
            attributes = connection_to_database.execute('Select * from networkdevices')
            for attribute in attributes:
                ip = attribute[0]; port=int(attribute[1]); community=attribute[2]; version=int(attribute[3])
                probe_device(ip, port, community,version, connection_to_database)
         #       print("probe success!")

            connection_to_database.close()
            
def probe_device(ip, port, community, version, connection_to_database):

    try:
        session = Session(hostname=ip, remote_port=port, version=version, community=community)
    except Exception as e:
        print(e)
        failed = connection_to_database.execute("select FAILED_ATTEMPTS from networkdevices where IP=?, PORT=?",(ip,port))
        failed += 1
        connection_to_database.execute("update networkdevics set failed_attempts=? where (IP? and PORT=?)",(failed,ip,port))
        connection_to_database.commit()
    start = str(datetime.fromtimestamp(int(time.time())))
   # print("started at " + start)
    try:
        macs = session.walk(oids['dot1dTpFdbEntryAddress'])
        ports = session.walk(oids['dot1dTpFdbEntryPort'])
        for m,p in zip(macs, ports):
            oid = m.oid;oid_index = m.oid_index;snmp_type=m.snmp_type
            mac = ':'.join('{:02x}'.format(ord(a)) for a in m.value)
            portval = p.value
            attributes = connection_to_database.execute("SELECT * from results where (PORT=? and IP=?)",(portval,ip))
            fetch_data = attributes.fetchall()
            for connected_macs in fetch_data:
                m = connected_macs[3]
            if len(fetch_data)==0:
   
                connection_to_database.execute('''INSERT INTO results(IP, VLANS, port, MACS) values (?,?,?,?)''',(ip,VL,portval,mac))
                connection_to_database.commit()
            elif len(fetch_data)==1 and m.find(mac)==-1:
                finalmac = m+","+mac
                connection_to_database.execute("UPDATE results set MACS=? where PORT=?",(finalmac,portval))
                connection_to_database.commit()
        vlansnum = []
        vlanname = []
        vlans = session.walk(oids['vlans'])
        vlanindex = session.walk(oids['dot1qVlanStaticName'])
        values = []
        vlan_oids = []
        for index, vlan in zip(vlanindex, vlans):
            value = ':'.join('{:02x}'.format(ord(x)) for x in vlan.value)
            values = value.split(':')
            oid = vlan.oid
            vlan_oids.append(oid)
            vname = index.value
            vnums = oid.split('.')
            vnum = str(vnums[-1])
            
            combine = ''
            if vname != VL:
            #    print(vname)
                for i in range(len(values)):
                    hexlist = values
                    mac_hex = hexlist[i]
                    scale = 16
                    no_of_bits = 8
                    orghex = bin(int(mac_hex, scale))[2:].zfill(no_of_bits)
                    combine = combine + str(orghex)
                    orghex = ''
                    listvls = list(combine)
                for i in range(len(listvls)):
                    num = i + 1
                    vlanname.append(str(vname))
                    vlansnum.append(num)
                    
        for i in range(len(vlansnum)):
            portlan = '1'
          #  print(vlanname)
            connection_to_database.execute("update results set VLANS = ? where PORT=?", (vlanname[i],vlansnum[i]))
           # print("updated vlan name" + vlanname[i])
            connection_to_database.commit()
            time.sleep(0.005)
    except Exception as e:
        print(str(e)+' '+str(ip)+":"+str(port))
    finish = str(datetime.fromtimestamp(int(time.time())))
   # print("finished at " + finish)

    connection_to_database.execute("update networkdevices set FIRST_PROBE=?, LATEST_PROBE=? where (IP=? and PORT=?)",(start, finish, ip, port))
    connection_to_database.commit()

if  __name__=='__main__':
    while True:
        create_database_connection('track-a-mac.db')
   
        time.sleep(60)
