#!/usr/bin/env python3
import time
from datetime import datetime
import sqlite3
from easysnmp import Session



def main():
    while True:
        connect_to_database = None
        try:
            connect_to_database = sqlite3.connect('track-a-mac.db') # create or open track-a-mac database
            print("connected to database!")
            
            connect_to_database.close()     
        except sqlite3.Error as error:
            print(error)
            
        finally:
            if connect_to_database:
                switches = connect_to_database.execute("select * from networkdevices")
                for switch in switches:
                    ip = switch[0]; port= switch[1]; community = switch[2]; version = int(switch[3])
                    oids = {'dot1dTpFdbEntryAddress':'1.3.6.1.2.1.17.4.3.1.1',
							'dot1dTpFdbEntryPort':'1.3.6.1.2.1.17.4.3.1.2',
							'dot1qTpFdbEntryStatus':'1.3.6.1.2.1.17.4.3.1.3',
							'dot1qTpFdbAddress':'1.3.6.1.2.17.7.1.2.2.1.1',
							'dot1qTpFdbPort':'1.3.6.1.2.1.17.7.1.2.2.1.2',
							'dot1qTpFdbStatus':'1.3.6.1.2.1.17.7.1.2.2.1.3',
							'dot1qVlanStaticName':'1.3.6.1.2.1.17.7.1.4.3.1.1',
							'sysDescr':'1.1.3.6.1.2.1.1.1',
							'dot1dBasePortIfIndex':'1.3.6.1.2.1.17.1.4.1.2',
							'dot1qVlanStaticUntaggedPorts':'1.3.6.1.2.1.17.7.1.4.3.1.4'
       						}
                    try:
                        session = Session(hostname=ip, remote_port=port, version=2, community=community)
                    except Exception as error:
                        print(error)
                        failed = connect_to_database.execute("select failed_attempts from networkdevices where ip=?, port=?", ip, port)
                        failed += 1
                        connect_to_database.execute("update switches set failed_attempts=? where (ip=? and port=?)", (failed, ip, port))
                        connect_to_database.commit()
                    request_time = str(datetime.fromtimestamp(int(time.time())))
                    try:
                        computers = session.walk(oids['dot1dTpFdbEntryAddress'])
                        ports = session.walk(oids['dot1dTpFdbEntryPort'])
                        for c, p in zip(computers, ports):
                            oid = c.oid; oid_index = c.oid_index; type_of_snmp = c.snmp_type
                            computer = ':'.join('{:02x}'.format(ord(a)) for a in c.value)
                            port = p.value
                            results = connect_to_database.execute("select * from results where port=? and ip=?", port, ip)
                            fetch_results = results.fetchall()
                            for connected_computers in fetch_results:
                                c = connected_computers[3]
                            if len(fetch_results) == 0:
                                print(ip, port, computer)
                                connect_to_database.execute("insert into results(ip=?, port=?, macs=?", ip, port, computer)
                                connect_to_database.commit()
                            elif len(fetch_results) == 1 and c.find(computer) == -1:
                                finalcomputers = c+","+computer
                                connect_to_database.execute("update results set macs=? where port=?", finalcomputers, port)
                                connect_to_database.commit()
                        vlan_number = []
                        vlan_name = []
                        vlans = session.walk(oids['vlans'])
                        index_of_vlan = session.walk(oids['dot1qVlanStaticName'])
                        vlan_values = []
                        vlan_oids = []
                        for index, vlan in zip(index_of_vlan, vlans):
                            vlan_value = ':'.join('{:02x}'.format(ord(x)) for x in vlan.value)
                            vlan_values = vlan_value.split(':')
                            vlan_oids.append(vlan.oid)
                            vname = index.value
                            vnums = vlan.oid.split('.')
                            
                            
                                 
                            
                             
                        
									
                    
       
if __name__ == '__main__':
    main()